AWSTemplateFormatVersion: '2010-09-09'

Resources:
  CalculationsDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub ${AWS::StackName}-calculations

  TransactionTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_transactions_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: 2022-01-01,NOW
          projection.datetime.format: yyyy-MM-dd
          projection.datetime.interval: 1
          projection.datetime.interval.unit: DAYS
          storage.location.template:
            !Join [
              '',
              ['s3://', !Ref StorageBucket, '/btm_transactions/${datetime}/'],
            ]
        PartitionKeys:
          - { Name: datetime, Type: date }
        StorageDescriptor:
          Columns:
            - Name: client_id
              Type: string
            - Name: event_id
              Type: string
            - Name: event_name
              Type: string
            - Name: timestamp
              Type: timestamp
            - Name: timestamp_formatted
              Type: string
            - Name: component_id
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['', ['s3://', !Ref StorageBucket, '/']]
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              {
                ignore.malformed.json: true,
                serialization.format: 1,
                field.delim: '',
              }
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  RateTableTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_rates_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template:
            !Join ['', ['s3://', !Ref ConfigBucket, '/rate_tables/prices.csv']]
        StorageDescriptor:
          Columns:
            - Name: client_id
              Type: string
            - Name: service_name
              Type: string
            - Name: volumes_from
              Type: int
            - Name: volumes_to
              Type: int
            - Name: unit_price
              Type: decimal(12,4)
            - Name: effective_from
              Type: date
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['', ['s3://', !Ref ConfigBucket, '/rate_tables/']]
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
              timestamp.formats: yyyy-MM-dd
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  VendorServiceMappingTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref CalculationsDB
      TableInput:
        Name: btm_vendor_service_standardised
        TableType: EXTERNAL_TABLE
        Parameters:
          has_encrypted_data: true
          storage.location.template:
            !Join ['', ['s3://', !Ref ConfigBucket, '/vendor_services/vendor-services.csv']]
        StorageDescriptor:
          Columns:
            - Name: vendor_name
              Type: string
            - Name: vendor_regex
              Type: string
            - Name: client_id
              Type: string
            - Name: service_name
              Type: string
            - Name: service_regex
              Type: string
            - Name: event_name
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Join ['', ['s3://', !Ref ConfigBucket, '/vendor_services/']]
          StoredAsSubDirectories: false
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              field.delim: ','
              skip.header.line.count: 1
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  TransactionsCuratedView:
    Type: Custom::AthenaView
    Properties:
      ServiceToken: !GetAtt CustomAthenaViewResourceFunction.Arn
      View:
        Database: !Ref InvoiceDB
        Name: btm_transactions_curated
        Query: |
          -- Adds an ordinal to the standardise_transaction dataset for attribution of rates to transactions based on timestamp
          btm_transaction_standardised_with_count AS (
              SELECT 
                  *,
                  "$path"                                                               AS path,
                  count(event_id) OVER (PARTITION BY event_name,date_trunc('month',from_unixtime(TRY_CAST(timestamp AS int),'+1')) ORDER BY date_trunc('month',from_unixtime(TRY_CAST(timestamp AS int),'+1'))) AS month_event_count
              FROM "btm_standardised_transaction"
          ),
          -- Harmonizes the transaction, rates and client datasets
          btm_transaction_harmonised AS (
              SELECT 
                  t.*,
                  c.vendor_name,
                  c.service_name,
                  TRY_CAST(r.transaction_price AS DECIMAL(11,2))                        AS transaction_price,
                  date_format(from_unixtime(TRY_CAST(timestamp AS int),'+1'),'%m')      AS month,
                  date_format(from_unixtime(TRY_CAST(timestamp AS int),'+1'),'%Y')      AS year
              FROM btm_transaction_standardised_with_count t
              LEFT JOIN "btm_vendor_client_standardised" c ON t.event_name=c.event_name
              LEFT JOIN "btm-rates-standardised" r ON (
                  t.event_name=r.event_name AND
                  (t.month_event_count BETWEEN r.volume_min AND r.volume_max) AND
                  (TRY_CAST(from_unixtime(TRY_CAST(t.timestamp AS BIGINT)) AS DATE) BETWEEN TRY_CAST(r.start AS DATE) AND TRY_CAST(r."end" AS DATE))
              )
          )
          SELECT
              MAX(vendor_name)                                                        AS vendor_name,
              MAX(service_name)                                                       AS service_name,
              SUM(transaction_price)                                                  AS price,
              COUNT(event_id)                                                         AS quantity,
              month,
              year
          FROM btm_transaction_harmonised
          GROUP BY vendor_name,service_name,year,month
        Workgroup: !Ref AthenaInvoiceWorkgroup

  AthenaTransactionWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub ${AWS::StackName}-athena-workgroup
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: 'SSE_KMS'
            KmsKey: !GetAtt KmsKey.Arn
          OutputLocation:
            !Join ['', ['s3://', !Ref AthenaQueryResultsBucket, '/']]

  AthenaQueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results
      VersioningConfiguration:
        Status: 'Enabled'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref AthenaAccessLogBucket
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled

  AthenaAccessLogBucket:
    # checkov:skip=CKV_AWS_18: This is the access log bucket - no need for another
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-athena-query-results-logs
      VersioningConfiguration:
        Status: Enabled
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt KmsKey.Arn
